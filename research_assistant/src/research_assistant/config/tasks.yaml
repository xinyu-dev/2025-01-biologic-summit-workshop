preprocess_task:
  description: >
    Follow the following steps: 
    1. First, the user will try to give you some sequences of a structure. 
    A structure can contain a single protein sequence from a single protein, or different proteins. 
    You will try to extrat the protein name (if single chain), or protein complex name (if multiple chains), and their sequence. 
    If you're not sure about the name, just name it "structure1"
    Pay close attention to the schema of PreprocessInput on how you should format the input. 
    Remember, you just need a name for the structure, and collect all its sequences in to a list of strings. 
    For example: 
    1. Example 1:  
    user inputs: 
    Predict structure of my peptide: seq1
    Your output should be: 
    structure_name: "myPeptide"
    num_chains: 1
    sequences: ["seq1"]
    2. Example 2: user inputs: 
    >mAB1001 heavy chain
    seq1
    >mAB1001 light chain
    seq2
    Your output should be: 
    structure_name: "mAB1001"
    num_chains: 2
    sequences: ["seq1", "seq2"]
    3. Example 3: protein complex: 
    user inputs: 
    >heavy chain
    seq1
    >light chain
    seq2
    > target
    seq3
    Your output should be: 
    structure_name: "protein_complex1"
    num_chains: 3
    sequences: ["seq1", "seq2", "seq3"]
    Example 4: 
    user inputs: 
    I want to predict a homodimer of seq1
    Your output should be: 
    structure_name: "homodimer1"
    num_chains: 2
    sequences: ["seq1", "seq1"]
    Example 5: 
    I want to predict a complex consisting of seq1, and 2x seq2
    Your output should be: 
    structure_name: "complex1"
    num_chains: 3
    sequences: ["seq1", "seq2", "seq2"]
    2. Then pass the formatted input to the Preprocess tool. 
    3. Report the results.
    Now you can start. Here is the actual input from the user: {message}
  expected_output: >
    Output from the Preprocess tool. 
  agent: preprocess_agent


#   A concise summary of bullet points:   
# 1) Name of the protein
# 2) How many chains the protein has
# 3) For each chain: output the 1) clean sequence of each chain, after tool processing, 2) whether it is a valid protein sequence
# 4) In the notes, briefly summarize how you processed the input. 

model_selection_task:
  description: >
    Analyze output from the preprocess_agent, then decides on the best model for structure prediction. 
    If there are 0 chains, tell the user to inspect the input, and you can end the conversation here. 
    If human makes suggestions, incorporate the human's suggestions if the model is in the list of available models. 
  expected_output: >
    A concise summary of the following: 
    - List of names of selected models. 
    - A concise explanation of why you made the selection and why other models are not selected
  agent: model_selection_agent

esmfold_task:
  description: >
    1. If ESMfold is not among the selected_models, do nothing. No need to invoke the ESMFold tool. 
    2. If ESMFold is among selected_models, first retrieve the clean protein sequence in the context. Pay close attention to ESMFoldToolInput schema. 
    3. Then invoke ESMFold tool to predict the structure of the protein.
    4. If ESMFold tool is called, based on the tool result, report back to human the file path of the saved PDB file of the predicted structure. 
  expected_output: >
    Output from the ESMFold tool. 
  agent: esmfold_agent


# A concise report of: 
# 1) Answer to the following question in this format: "Is ESMFold selected? Yes|No"
# 2) If ESMFold is selected, answer the following question in this format: "Is the prediction successful? Yes|No"
# 3) If the prediction is successful, answer the following question in this format: "File path of the saved PDB file of the predicted structure: <file_path>"

# igfold_task:
#   description: >
#     Invoke IgFold tool to predict the structure of the antibody. 
#   expected_output: >
#     A concise report of: 
#     1) Answer to the following question in this format: "Is IgFold selected? Yes|No"
#     2) If the prediction is successful, answer the following question in this format: "File path of the saved PDB file of the predicted structure: <file_path>"
#   agent: igfold_agent

boltz_task:
  description: >
    Invoke Boltz tool to predict the structure of the protein. 
    1. If Boltz is not among selected_models, do nothing. No need to invoke the Boltz tool. 
    2. If Boltz is among selected_models, first retrieve the clean protein sequence in the context. Pay close attention to BoltzToolInput schema. 
    3. then use Boltz tool to predict the structure of the protein.
    4. If Boltz tool is called, based on the tool result, report back to human the file path of the saved PDB file of the predicted structure. 
  expected_output: >
    Output from the Boltz tool. 
  agent: boltz_agent

# A concise report of: 
# 1) Answer to the following question in this format: "Is Boltz selected? Yes|No"
# 2) If Boltz is selected, answer the following question in this format: "Is the prediction successful? Yes|No"
# 3) If the prediction is successful, answer the following question in this format: "File path of the saved PDB file of the predicted structure: <file_path>"

reporter_task:
  description: >
    Report the final results to the user. 
  expected_output: >
    A concise bullet point summary of the following: 
    1. Start with "Final Report: "
    2. Make a bullet point for each of folding models provided in the context
    3. For each model, make a bullet point for the following: 1) whether model is selected for the protein 2) if selected, whether the prediction is successful, 3) if successful, file path or folder path of the saved results. 
  agent: reporter_agent
